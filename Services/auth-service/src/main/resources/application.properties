# Server Port
server.port=8081

spring.application.name=auth-service
eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

# PostgreSQL Datasource
spring.datasource.url=jdbc:postgresql://postgres:5432/library_management
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.default_schema=auth_service


# Google OAuth2
spring.security.oauth2.client.registration.google.client-name=google
spring.security.oauth2.client.registration.google.client-id=779949935021-9gcl9ik7i276sfvtqrpvgcvqg6030h57.apps.googleusercontent.com
#TODO: only add client secret for testing then remove again. It is not allowed to make a commit with the secret included
spring.security.oauth2.client.registration.google.scope=openid,profile,email

# Facebook OAuth2
spring.security.oauth2.client.registration.facebook.client-name=facebook
spring.security.oauth2.client.registration.facebook.client-id=1875679849647346
#TODO: add client secret, same here
spring.security.oauth2.client.registration.facebook.scope=email,public_profile
# You do not receive the "openid" here

# GitHub OAuth2
spring.security.oauth2.client.registration.github.client-name=github
spring.security.oauth2.client.registration.github.client-id=Ov23liRjPyFc9xAws9f8
#TODO: add client secret, same here
spring.security.oauth2.client.registration.github.scope=user:email
spring.security.oauth2.client.registration.github.redirect-uri=http://localhost:8081/login/oauth2/code/{registrationId}


